import { type ContractRunner } from "ethers";
import type { IL2NativeTokenVault, IL2NativeTokenVaultInterface } from "../IL2NativeTokenVault";
export declare class IL2NativeTokenVault__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_l1ChainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_aliasedOwner";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_l2TokenProxyBytecodeHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_legacySharedBridge";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "_bridgedTokenBeacon";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "_contractsDeployedAlready";
            readonly type: "bool";
        }, {
            readonly internalType: "address";
            readonly name: "_wethToken";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_baseTokenAssetId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "expected";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "supplied";
            readonly type: "address";
        }];
        readonly name: "AddressMismatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AmountMustBeGreaterThanZero";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "AssetIdAlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "expected";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "supplied";
            readonly type: "bytes32";
        }];
        readonly name: "AssetIdMismatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "assetId";
            readonly type: "bytes32";
        }];
        readonly name: "AssetIdNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "BurningNativeWETHNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DeployFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "DeployingBridgedTokenForNativeToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyAddress";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyBytes32";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyDeposit";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "EmptyToken";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidNTVBurnData";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NoLegacySharedBridge";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NonEmptyMsgValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenIsLegacy";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokenNotLegacy";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "TokenNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TokensWithFeesNotSupported";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "U32CastOverflow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }];
        readonly name: "Unauthorized";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "UnsupportedEncodingVersion";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "expected";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "actual";
            readonly type: "uint256";
        }];
        readonly name: "ValueMismatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ZeroAddress";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "assetId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "BridgeBurn";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "assetId";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "BridgeMint";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "bridgedTokenBeacon";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "bridgedTokenProxyBytecodeHash";
            readonly type: "bytes32";
        }];
        readonly name: "BridgedTokenBeaconUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "l1Sender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "l2Receiver";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "l2Token";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "FinalizeDeposit";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "version";
            readonly type: "uint8";
        }];
        readonly name: "Initialized";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "l2TokenBeacon";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "l2TokenProxyBytecodeHash";
            readonly type: "bytes32";
        }];
        readonly name: "L2TokenBeaconUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferStarted";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Paused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "Unpaused";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "l2Sender";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "l1Receiver";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "l2Token";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "WithdrawalInitiated";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "ASSET_ROUTER";
        readonly outputs: readonly [{
            readonly internalType: "contract IAssetRouterBase";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "BASE_TOKEN_ASSET_ID";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "L1_CHAIN_ID";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "L2_LEGACY_SHARED_BRIDGE";
        readonly outputs: readonly [{
            readonly internalType: "contract IL2SharedBridgeLegacy";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "WETH_TOKEN";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "tokenAddress";
            readonly type: "address";
        }];
        readonly name: "assetId";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "assetId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "_l2MsgValue";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_assetId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_originalCaller";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "bridgeBurn";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_bridgeMintData";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_assetId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "_data";
            readonly type: "bytes";
        }];
        readonly name: "bridgeMint";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "bridgedTokenBeacon";
        readonly outputs: readonly [{
            readonly internalType: "contract IBeacon";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_tokenOriginChainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "_nonNativeToken";
            readonly type: "address";
        }];
        readonly name: "calculateCreate2TokenAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_nativeToken";
            readonly type: "address";
        }];
        readonly name: "ensureTokenIsRegistered";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "tokenAssetId";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_originChainId";
            readonly type: "uint256";
        }];
        readonly name: "getERC20Getters";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_l1Token";
            readonly type: "address";
        }];
        readonly name: "l2TokenAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "expectedToken";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "assetId";
            readonly type: "bytes32";
        }];
        readonly name: "originChainId";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "originChainId";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "paused";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_nativeToken";
            readonly type: "address";
        }];
        readonly name: "registerToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_l2TokenAddress";
            readonly type: "address";
        }];
        readonly name: "setLegacyTokenAssetId";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "assetId";
            readonly type: "bytes32";
        }];
        readonly name: "tokenAddress";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "tokenAddress";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_erc20Data";
            readonly type: "bytes";
        }];
        readonly name: "tokenDataOriginChainId";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tokenOriginChainId";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_burnData";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_expectedAssetId";
            readonly type: "bytes32";
        }];
        readonly name: "tryRegisterTokenFromBurnData";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IL2NativeTokenVaultInterface;
    static connect(address: string, runner?: ContractRunner | null): IL2NativeTokenVault;
}
